{"ast":null,"code":"var _jsxFileName = \"/Users/illyach/Desktop/illyachi/src/Pages/Details/Details.js\",\n  _s = $RefreshSig$();\nimport React, { useMemo, useState } from 'react';\nimport DetailsTitle from \"../../Components/UI/DetailsTitle/DetailsTitle\";\nimport s from './Details.module.scss';\nimport Rate from \"../../Components/UI/Rate/Rate\";\nimport DetailsProp from \"../../Components/UI/DetailsProp/DetailsProp\";\nimport data from \"../Home/Home\";\nimport { useParams } from \"react-router-dom\";\nimport { useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Details() {\n  _s();\n  var _movies$rate;\n  const [movies, setMovies] = useState({});\n  const [isLoading, setIsLoading] = useState(false);\n  const params = useParams();\n  useEffect(() => {\n    if (!params.id) return;\n    const getMovie = async () => {\n      try {\n        const response = await fetch(`https://cogitize-practice-suggest.onrender.com/movie/${params.id}`);\n        const data = await response.json();\n        setMovies(data);\n        // console.log(data.genres[0].name);\n        console.log(movies.genres[0].name);\n      } catch (error) {\n        console.log(error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    getMovie();\n  }, [params]);\n  const getStringGenres = () => {\n    var _movies$genres;\n    let strGenre = (_movies$genres = movies.genres) === null || _movies$genres === void 0 ? void 0 : _movies$genres.map(item => item.name).join(\", \");\n    return strGenre;\n    console.log('str', strGenre);\n  };\n  console.log(getStringGenres(), 'hi');\n  const getStringDate = movieDate => {\n    let string = \"\";\n    if (!movieDate) {\n      return string;\n    }\n    const date = new Date(movieDate);\n    string = `${date.getFullYear()}-${date.getMonth()}-${date.getDate()}`;\n    return string;\n  };\n  // console.log(movies?.genres[0].name);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: isLoading ? /*#__PURE__*/_jsxDEV(\"h1\", {\n      style: {\n        fontSize: '300px'\n      },\n      children: \"is Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: s.details_container,\n      children: [/*#__PURE__*/_jsxDEV(DetailsTitle, {\n        backdrop: movies.backdrop,\n        title: movies.title,\n        genres: getStringGenres(movies.genres)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: s.content,\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: movies.poster,\n          alt: \"poster\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: s.second_content,\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            className: s.h1,\n            children: movies.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: s.description,\n            children: [\" \", movies.description]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: s.prop_list,\n            children: [/*#__PURE__*/_jsxDEV(DetailsProp, {\n              isRate: true,\n              label: \"Rate\",\n              value: (_movies$rate = movies.rate) === null || _movies$rate === void 0 ? void 0 : _movies$rate.toFixed(1)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 73,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(DetailsProp, {\n              label: \"Type\",\n              value: movies.type\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 74,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(DetailsProp, {\n              label: \"Release Date\",\n              value: getStringDate(movies.date)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 75,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(DetailsProp, {\n              label: \"Run time\",\n              value: movies.runtime\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 76,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(DetailsProp, {\n              label: \"Genres\",\n              value: getStringGenres(movies.genres)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 78,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 17\n    }, this)\n  }, void 0, false);\n}\n_s(Details, \"I86v2EXbiQWgGcc8I3dr+9+MPR0=\", false, function () {\n  return [useParams];\n});\n_c = Details;\nexport default Details;\nvar _c;\n$RefreshReg$(_c, \"Details\");","map":{"version":3,"names":["React","useMemo","useState","DetailsTitle","s","Rate","DetailsProp","data","useParams","useEffect","jsxDEV","_jsxDEV","Fragment","_Fragment","Details","_s","_movies$rate","movies","setMovies","isLoading","setIsLoading","params","id","getMovie","response","fetch","json","console","log","genres","name","error","getStringGenres","_movies$genres","strGenre","map","item","join","getStringDate","movieDate","string","date","Date","getFullYear","getMonth","getDate","children","style","fontSize","fileName","_jsxFileName","lineNumber","columnNumber","className","details_container","backdrop","title","content","src","poster","alt","second_content","h1","description","prop_list","isRate","label","value","rate","toFixed","type","runtime","_c","$RefreshReg$"],"sources":["/Users/illyach/Desktop/illyachi/src/Pages/Details/Details.js"],"sourcesContent":["import React, {useMemo, useState} from 'react';\nimport DetailsTitle from \"../../Components/UI/DetailsTitle/DetailsTitle\";\nimport s from './Details.module.scss'\nimport Rate from \"../../Components/UI/Rate/Rate\";\nimport DetailsProp from \"../../Components/UI/DetailsProp/DetailsProp\";\nimport data from \"../Home/Home\";\nimport {useParams} from \"react-router-dom\";\nimport {useEffect} from \"react\";\nfunction Details() {\n    const [movies, setMovies] = useState({})\n    const [isLoading, setIsLoading] = useState(false);\n\n    const params = useParams()\n\n    useEffect(() => {\n        if (!params.id) return\n        const getMovie = async () => {\n            try {\n                const response = await fetch(\n                    `https://cogitize-practice-suggest.onrender.com/movie/${params.id}`\n                );\n                const data = await response.json();\n\n                setMovies(data);\n                // console.log(data.genres[0].name);\n                console.log(movies.genres[0].name);\n            } catch (error) {\n                console.log(error);\n            } finally {\n                setIsLoading(false)\n            }\n        };\n\n        getMovie();\n    }, [params]);\n\n\n    const getStringGenres = () => {\n        let strGenre = movies.genres?.map((item) => item.name).join(\", \");\n        return strGenre\n        console.log('str', strGenre);\n    };\n    console.log(getStringGenres(), 'hi');\n\n    const getStringDate = (movieDate) => {\n        let string = \"\";\n\n        if (!movieDate) {\n            return string;\n        }\n\n        const date = new Date(movieDate);\n        string = `${date.getFullYear()}-${date.getMonth()}-${date.getDate()}`;\n\n        return string;\n    };\n    // console.log(movies?.genres[0].name);\n    return (\n        <>\n            {isLoading ? (\n                <h1 style={{fontSize:'300px'}}>is Loading...</h1>\n            ) : (\n                <div className={s.details_container}>\n                    <DetailsTitle backdrop={movies.backdrop} title={movies.title}\n                                  genres={getStringGenres(movies.genres)}/>\n                    <div className={s.content}>\n                        <img src={movies.poster} alt=\"poster\"/>\n                        <div className={s.second_content}>\n\n                            <h1 className={s.h1}>{movies.title}</h1>\n                            <p className={s.description}> {movies.description}</p>\n                            <div className={s.prop_list}>\n                                <DetailsProp isRate={true} label={\"Rate\"} value={movies.rate?.toFixed(1)}/>\n                                <DetailsProp label={\"Type\"} value={movies.type}/>\n                                <DetailsProp label={\"Release Date\"} value={getStringDate(movies.date)}/>\n                                <DetailsProp label={\"Run time\"} value={movies.runtime}/>\n\n                                <DetailsProp\n                                    label={\"Genres\"}\n                                    value={getStringGenres(movies.genres)}\n                                />\n                            </div>\n                        </div>\n                    </div>\n\n                </div>\n            )}\n        </>\n    )\n}\n\nexport default Details;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}